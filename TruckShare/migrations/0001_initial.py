# Generated by Django 2.2.2 on 2020-12-06 20:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goodsType', models.CharField(max_length=100)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manfacturers', to='TruckShare.City')),
            ],
        ),
        migrations.CreateModel(
            name='Truck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('SMT1', 'Small Type-1'), ('SMT2', 'Small Type-2'), ('LMT1', 'Large Type-1'), ('LMT2', 'Large Type-2')], default='SMT1', max_length=4)),
                ('maxSpeed', models.IntegerField(null=True)),
                ('mileage', models.FloatField(null=True)),
                ('volumeCap', models.IntegerField(null=True)),
                ('weightCap', models.IntegerField(null=True)),
                ('costFact1', models.IntegerField(null=True)),
                ('costFact2', models.IntegerField(null=True)),
                ('availability', models.BooleanField(default=False)),
                ('booked', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('companyName', models.CharField(max_length=100)),
                ('phoneNo', models.CharField(max_length=10)),
                ('is_manufacturer', models.BooleanField(default=False)),
                ('is_transporter', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Transporter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('laborCost', models.IntegerField(null=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transporters', to='TruckShare.City')),
                ('trucks', models.ManyToManyField(related_name='ownedTrucks', to='TruckShare.Truck')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Road',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance', models.IntegerField(null=True)),
                ('speedCap', models.FloatField(null=True)),
                ('tollTax', models.IntegerField(default=0)),
                ('connection', models.ManyToManyField(related_name='roads', to='TruckShare.City')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departure', models.DateTimeField(null=True)),
                ('delivery', models.DateTimeField(null=True)),
                ('TimeFlexibility', models.BooleanField(default=True)),
                ('payment', models.FloatField(null=True)),
                ('weightOccupied', models.IntegerField(null=True)),
                ('volumeOccupied', models.IntegerField(null=True)),
                ('customers', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='TruckShare.Manufacturer')),
                ('destination', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='destinationOrders', to='TruckShare.City')),
                ('source', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sourceOrders', to='TruckShare.City')),
                ('transporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='TruckShare.Manufacturer')),
                ('travellingRoute', models.ManyToManyField(related_name='roadOrders', to='TruckShare.Road')),
                ('truck', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='truckOrders', to='TruckShare.Truck')),
            ],
        ),
        migrations.AddField(
            model_name='manufacturer',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
